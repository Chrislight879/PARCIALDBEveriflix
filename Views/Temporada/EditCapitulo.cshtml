@model PARCIALDBEveriflix.Models.Capitulo
@{
    ViewBag.Title = "Editar Capítulo - " + ViewBag.TemporadaNombre;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    body {
        background-color: #121212;
        color: #e0e0e0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .edit-container {
        width: 95%;
        max-width: 800px;
        margin: 30px auto;
        padding: 40px;
        background-color: #1e1e1e;
        border-radius: 12px;
        box-shadow: 0 8px 25px rgba(183, 28, 28, 0.15);
        color: #fff;
        position: relative;
        overflow: hidden;
        border: 1px solid #333;
    }

    .edit-header {
        background: linear-gradient(135deg, #b71c1c, #8c1616);
        color: white;
        padding: 15px 20px;
        border-radius: 10px 10px 0 0;
        margin-bottom: 30px;
    }

    .form-group {
        margin-bottom: 25px;
    }

    .control-label {
        color: #ff5252;
        font-weight: 600;
        margin-bottom: 8px;
        display: block;
    }

    .form-control {
        background-color: #333;
        color: white;
        border: 1px solid #444;
        border-radius: 6px;
        padding: 12px 15px;
        transition: all 0.3s;
        width: 150px;
    }

        .form-control:focus {
            background-color: #3a3a3a;
            border-color: #ff5252;
            box-shadow: 0 0 0 0.2rem rgba(183, 28, 28, 0.25);
            color: white;
        }

    .text-danger {
        color: #ff6b6b;
        font-size: 0.85rem;
        margin-top: 8px;
        display: block;
    }

    .btn {
        padding: 12px 24px;
        border-radius: 6px;
        font-weight: 600;
        transition: all 0.3s;
        border: none;
        margin: 5px;
    }

    .btn-primary {
        background: linear-gradient(to right, #b71c1c, #d32f2f);
        color: white;
    }

        .btn-primary:hover {
            background: linear-gradient(to right, #d32f2f, #b71c1c);
            transform: translateY(-2px);
        }

    .btn-outline-secondary {
        border: 2px solid #6c757d;
        color: #6c757d;
        background-color: transparent;
    }

        .btn-outline-secondary:hover {
            background-color: #6c757d;
            color: white;
        }

    .btn-danger {
        background: linear-gradient(to right, #8c1616, #b71c1c);
        color: white;
    }

        .btn-danger:hover {
            background: linear-gradient(to right, #b71c1c, #8c1616);
        }

    .time-format-hint {
        color: #888;
        font-size: 0.85rem;
        margin-top: 5px;
    }

    .button-group {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
    }

    @@media (max-width: 576px) {
        .button-group {
            flex-direction: column;
        }

        .btn {
            width: 100%;
        }
    }
</style>

<div class="edit-container">
    <div class="edit-header">
        <h2><i class="fas fa-edit"></i> Editar Capítulo</h2>
        <h4>@ViewBag.TemporadaNombre - @ViewBag.SerieNombre</h4>
    </div>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.Id_Capitulo)
        @Html.HiddenFor(model => model.Id_Temporada)

        <!-- Mensajes de validación -->
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control", placeholder = "Nombre del capítulo" } })
            @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Duracion, htmlAttributes: new { @class = "control-label" })
            @Html.TextBoxFor(model => model.Duracion,
                new
                     {
                    @class = "form-control",
                    placeholder = "HH:MM:SS",
                    id = "duracionInput"
                })
            <div class="time-format-hint">Formato: HH:MM:SS (ej. 00:45:00)</div>
            @Html.ValidationMessageFor(model => model.Duracion, "", new { @class = "text-danger" })
        </div>

        <div class="form-group button-group">
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-save"></i> Guardar Cambios
            </button>
            <a href="@Url.Action("DeleteCapitulo", new { id = Model.Id_Capitulo })" class="btn btn-danger">
                <i class="fas fa-trash"></i> Eliminar
            </a>
            <a href="@Url.Action("ManageCapitulos", new { idTemporada = ViewBag.IdTemporada })" class="btn btn-outline-secondary">
                <i class="fas fa-times"></i> Cancelar
            </a>
        </div>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/js/all.min.js"></script>

    <script>
        $(document).ready(function () {
            // Configurar el campo de duración
            var duracionValue = '@Model.Duracion.ToString(@"hh\:mm\:ss")';
            $('#duracionInput').val(duracionValue);

            // Validación y formato automático
            $('#duracionInput').on('input', function() {
                var value = $(this).val();

                // Auto-insertar los dos puntos
                if (value.length === 2 || value.length === 5) {
                    if (value.charAt(value.length - 1) !== ':') {
                        $(this).val(value + ':');
                    }
                }

                // Limitar a formato HH:MM:SS
                if (value.length > 8) {
                    $(this).val(value.substring(0, 8));
                }
            });

            // Validación al perder foco
            $('#duracionInput').on('blur', function() {
                var value = $(this).val();
                var regex = /^([0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/;

                if (!regex.test(value)) {
                    // Intentar corregir formato incompleto
                    if (value.length === 5 && value.indexOf(':') === 2) {
                        $(this).val(value + ':00');
                    } else if (value.length === 2 && value.indexOf(':') === -1) {
                        $(this).val(value + ':00:00');
                    } else {
                        // Si no se puede corregir, mostrar error
                        $(this).addClass('is-invalid');
                    }
                }
            });

            // Limpiar estado de error al enfocar
            $('#duracionInput').on('focus', function() {
                $(this).removeClass('is-invalid');
            });

            // Confirmación antes de eliminar
            $('.btn-danger').on('click', function(e) {
                if (!confirm('¿Está seguro que desea eliminar este capítulo?')) {
                    e.preventDefault();
                }
            });
        });

        // Validación del lado del cliente para TimeSpan
        $.validator.addMethod("validatetimespan", function(value, element) {
            return /^([0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/.test(value);
        }, "Por favor ingrese una duración válida en formato HH:MM:SS");

        // Aplicar la validación al campo de duración
        $("form").validate({
            rules: {
                Duracion: {
                    required: true,
                    validatetimespan: true
                }
            },
            messages: {
                Duracion: {
                    required: "La duración es requerida",
                    validatetimespan: "Formato inválido (use HH:MM:SS)"
                }
            }
        });
    </script>
}